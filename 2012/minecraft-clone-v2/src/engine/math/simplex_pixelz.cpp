#include <math.h>
#include "engine\math\simplex.h"

float grad[12][3] = {
    {1.0,1.0,0.0},{-1.0,1.0,0.0},{1.0,-1.0,0.0},{-1.0,-1.0,0.0},
    {1.0,0.0,1.0},{-1.0,0.0,1.0},{1.0,0.0,-1.0},{-1.0,0.0,-1.0},
    {0.0,1.0,1.0},{0.0,-1.0,1.0},{0.0,1.0,-1.0},{0.0,-1.0,-1.0}
};

int perm[512] = {151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180};

float dot(float x, float y, float z, float* g){
    return x*g[0] + y*g[1] + z*g[2];
}

float d1(float x, float y, float z, int g)
{
	switch(g)
	{
	case 0:
		return x + y;
	case 1:
		return y - x;
	case 2:
		return x - y;
	case 3:
		return -x - y;
	case 4:
		return x + z;
	case 5:
		return z - x;
	case 6:
		return x - z;
	case 7:
		return -x - z;
	case 8:
		return y + z;
	case 9:
		return z - y;
	case 10:
		return y - z;
	default:
		return -y - z;
	}
}

float Engine::Math::noise(float xin, float yin, float zin){
    float x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3, t0, t1, t2, t3, nsum = 0;
    int i, j, k, ii, jj, kk, i1, j1, k1, i2, j2, k2, gi0, gi1, gi2, gi3;

    const float F3 = 1.0/3.0;
    const float s = (xin+yin+zin)*F3;
    i = xin+s;
    j = yin+s;
    k = zin+s;

    const float G3 = 1.0/6.0;

    x0 = xin - i + s;
    y0 = yin - j + s;
    z0 = zin - k + s;


	int lt[] = {1,0,0,1,1,0,0,0,
		1,0,0,1,0,1,0,0,
		0,0,1,1,0,1,0,0,
		0,0,0,0,0,0,0,0,
		0,0,1,0,1,1,0,0,
		0,1,0,0,1,1,0,0,
		0,1,0,1,1,0,0,0};

	int m1 = y0 < z0;
	m1 = (m1 << 1) | m1;

	int * const p = &lt[0] + (((m1 & ((x0 < z0) + 1)) << 3) | ((x0 < y0) << 5));

	i1 = p[0];
	j1 = p[1];
	k1 = p[2];
	i2 = p[3];
	j2 = p[4];
	k2 = p[5];

    x1 = x0 - p[0] + G3;
    y1 = y0 - p[1] + G3;
    z1 = z0 - p[2] + G3;
    x2 = x0 - p[3] + F3;
    y2 = y0 - p[4] + F3;
    z2 = z0 - p[5] + F3;
    x3 = x0 - 0.5;
    y3 = y0 - 0.5;
    z3 = z0 - 0.5;

    ii = i & 255;
    jj = j & 255;
    kk = k & 255;

    gi0 = perm[ii+perm[jj+perm[kk]]] % 12;
    gi1 = perm[ii+p[0]+perm[jj+p[1]+perm[kk+p[2]]]] % 12;
    gi2 = perm[ii+p[3]+perm[jj+p[4]+perm[kk+p[5]]]] % 12;
    gi3 = perm[ii+1+perm[jj+1+perm[kk+1]]] % 12;


    t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;
    if(t0>=0)
        nsum += pow(t0, 4) * d1(x0, y0, z0, gi0);

    t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;
    if(t1>=0)
        nsum += pow(t1, 4) * d1(x1, y1, z1, gi1);

    t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;
    if(t2>=0)
        nsum += pow(t2, 4) * d1(x2, y2, z2, gi2);

    t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;
    if(t3>=0)
        nsum += pow(t3, 4) * d1(x3, y3, z3, gi3);

    return 16.0 * nsum +1.0;
}

float Engine::Math::simplex_noise(int octaves, float x, float y, float z){
    float value = 0.0;
    int i, i2 = 1;
    for(i=0; i<octaves; i++)
    {
        value += noise(x * i2, y * i2, z * i2);
        i2 <<= 1;
    }
    return value;
}

